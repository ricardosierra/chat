{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;;AAAA,qCAA4F;AAC5F,mCAA8D;AAC9D,+BAAiC;AAEjC,mCAAsC;AACtC,+CAAwG;AAE3F,QAAA,mBAAmB,GAAG;IACjC,SAAS;IACT,IAAI,mBAAgB,CAAC,MAAM,EAAE;IAC7B,IAAI,mBAAgB,CAAC,cAAc,EAAE;IACrC,IAAI,mBAAgB,CAAC,gBAAgB,EAAE;IACvC,IAAI,mBAAgB,CAAC,cAAc,EAAE;IACrC,kBAAkB;IAClB,IAAI,sBAAO,EAAE;IACb,IAAI,mBAAI,EAAE;IACV,kBAAkB;IAClB,IAAI,kCAAmB,EAAE;IACzB,IAAI,mCAAoB,EAAE;IAC1B,OAAO;IACP,IAAI,2BAAY,EAAE;CACnB,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,SAAgB,IAAI,CAAC,OAAyB;IAAzB,wBAAA,EAAA,YAAyB;IAC5C,IAAI,OAAO,CAAC,mBAAmB,KAAK,SAAS,EAAE;QAC7C,OAAO,CAAC,mBAAmB,GAAG,2BAAmB,CAAC;KACnD;IAED,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;QACvD,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;KACtC;IAED,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE;QAC/D,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;KAC9C;IAED,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;QACvE,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;KACtD;IAED,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,qBAAe,CAAC,oBAAc,EAAE,EAAE,oBAAa,EAAE,CAAC,CAAC;KACpD;IAED,kBAAW,CAAC,mBAAU,EAAE,OAAO,CAAC,CAAC;AACnC,CAAC;AAtBD,oBAsBC;AAED;;;;GAIG;AACH,SAAgB,WAAW;IACzB,OAAO,oBAAa,EAAE,CAAC,WAAW,EAAE,CAAC;AACvC,CAAC;AAFD,kCAEC;AAED;;;;;GAKG;AACH,SAAsB,KAAK,CAAC,OAAgB;;;YAC1C,sBAAQ,oBAAa,EAAE,CAAC,SAAS,EAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,EAAC;;;CACnE;AAFD,sBAEC;AAED;;;;;GAKG;AACH,SAAsB,KAAK,CAAC,OAAgB;;;YAC1C,sBAAQ,oBAAa,EAAE,CAAC,SAAS,EAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,EAAC;;;CACnE;AAFD,sBAEC","sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport * as domain from 'domain';\nimport { NodeOptions } from './backend';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\n\nexport const defaultIntegrations = [\n  // Common\n  new CoreIntegrations.Dedupe(),\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new CoreIntegrations.ExtraErrorData(),\n  // Native Wrappers\n  new Console(),\n  new Http(),\n  // Global Handlers\n  new OnUncaughtException(),\n  new OnUnhandledRejection(),\n  // Misc\n  new LinkedErrors(),\n];\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n *\n * @example\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see NodeOptions for documentation on configuration options.\n */\nexport function init(options: NodeOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.release === undefined && process.env.SENTRY_RELEASE) {\n    options.release = process.env.SENTRY_RELEASE;\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n\n  if (domain.active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n\n  initAndBind(NodeClient, options);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  return (getCurrentHub().getClient() as NodeClient).flush(timeout);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  return (getCurrentHub().getClient() as NodeClient).close(timeout);\n}\n"]}