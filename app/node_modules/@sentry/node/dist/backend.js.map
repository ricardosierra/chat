{"version":3,"file":"backend.js","sourceRoot":"","sources":["../src/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseBackend, Dsn, getCurrentHub, Options } from '@sentry/core';\nimport { SentryEvent, SentryEventHint, Severity, Transport } from '@sentry/types';\nimport { isError, isPlainObject } from '@sentry/utils/is';\nimport { limitObjectDepthToSize, serializeKeysToEventMessage } from '@sentry/utils/object';\nimport { createHash } from 'crypto';\nimport { extractStackFromError, parseError, parseStack, prepareFramesForEvent } from './parsers';\nimport { HTTPSTransport, HTTPTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Node SDK.\n * @see NodeClient for more information.\n */\nexport interface NodeOptions extends Options {\n  [key: string]: any;\n\n  /** Callback that is executed when a fatal global error occurs. */\n  onFatalError?(error: Error): void;\n\n  /** Sets an optional server name (device name) */\n  serverName?: string;\n\n  /** Maximum time to wait to drain the request queue, before the process is allowed to exit. */\n  shutdownTimeout?: number;\n\n  /** Set a HTTP proxy that should be used for outbound requests. */\n  httpProxy?: string;\n\n  /** Set a HTTPS proxy that should be used for outbound requests. */\n  httpsProxy?: string;\n\n  /** HTTPS proxy certificates path */\n  caCerts?: string;\n\n  /** Sets the number of context lines for each frame when loading a file. */\n  frameContextLines?: number;\n}\n\n/** The Sentry Node SDK Backend. */\nexport class NodeBackend extends BaseBackend<NodeOptions> {\n  /**\n   * @inheritdoc\n   */\n  protected setupTransport(): Transport {\n    if (!this.options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super.setupTransport();\n    }\n\n    const dsn = new Dsn(this.options.dsn);\n\n    const transportOptions = this.options.transportOptions || { dsn };\n    const clientOptions = ['httpProxy', 'httpsProxy', 'caCerts'];\n\n    for (const option of clientOptions) {\n      if (this.options[option] || transportOptions[option]) {\n        transportOptions[option] = transportOptions[option] || this.options[option];\n      }\n    }\n\n    if (this.options.transport) {\n      return new this.options.transport(transportOptions);\n    } else if (dsn.protocol === 'http') {\n      return new HTTPTransport(transportOptions);\n    } else {\n      return new HTTPSTransport(transportOptions);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(exception: any, hint?: SentryEventHint): Promise<SentryEvent> {\n    let ex: any = exception;\n\n    if (!isError(exception)) {\n      if (isPlainObject(exception)) {\n        // This will allow us to group events based on top-level keys\n        // which is much better than creating new group when any key/value change\n        const keys = Object.keys(exception as {}).sort();\n        const message = `Non-Error exception captured with keys: ${serializeKeysToEventMessage(keys)}`;\n\n        getCurrentHub().configureScope(scope => {\n          scope.setExtra('__serialized__', limitObjectDepthToSize(exception as {}));\n          scope.setFingerprint([\n            createHash('md5')\n              .update(keys.join(''))\n              .digest('hex'),\n          ]);\n        });\n\n        ex = (hint && hint.syntheticException) || new Error(message);\n        (ex as Error).message = message;\n      } else {\n        // This handles when someone does: `throw \"something awesome\";`\n        // We use synthesized Error here so we can extract a (rough) stack trace.\n        ex = (hint && hint.syntheticException) || new Error(exception as string);\n      }\n    }\n\n    const event: SentryEvent = await parseError(ex as Error, this.options);\n\n    return {\n      ...event,\n      event_id: hint && hint.event_id,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(\n    message: string,\n    level: Severity = Severity.Info,\n    hint?: SentryEventHint,\n  ): Promise<SentryEvent> {\n    const event: SentryEvent = {\n      event_id: hint && hint.event_id,\n      level,\n      message,\n    };\n\n    if (this.options.attachStacktrace && hint && hint.syntheticException) {\n      const stack = hint.syntheticException ? await extractStackFromError(hint.syntheticException) : [];\n      const frames = await parseStack(stack, this.options);\n      event.stacktrace = {\n        frames: prepareFramesForEvent(frames),\n      };\n    }\n\n    return event;\n  }\n}\n"]}