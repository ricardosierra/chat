{"version":3,"file":"basebackend.js","sourceRoot":"","sources":["../src/basebackend.ts"],"names":[],"mappings":";;;AAEA,+CAA8C;AAC9C,+CAAiD;AACjD,iCAAsC;AAEtC,0CAAkD;AAOlD;;GAEG;AACH;IAOE,8CAA8C;IAC9C,qBAAmB,OAAU;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YACrB,eAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACzC,CAAC;IAED;;OAEG;IACO,oCAAc,GAAxB;QACE,OAAO,IAAI,oBAAa,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACU,wCAAkB,GAA/B,UAAgC,UAAe,EAAE,KAAuB;;;gBACtE,MAAM,IAAI,mBAAW,CAAC,sDAAsD,CAAC,CAAC;;;KAC/E;IAED;;OAEG;IACU,sCAAgB,GAA7B,UAA8B,QAAgB,EAAE,MAAiB,EAAE,KAAuB;;;gBACxF,MAAM,IAAI,mBAAW,CAAC,oDAAoD,CAAC,CAAC;;;KAC7E;IAED;;OAEG;IACU,+BAAS,GAAtB,UAAuB,KAAkB;;;gBACvC,uBAAuB;gBACvB,2BAA2B;gBAC3B,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;oBAC/B,2BAA2B;oBAC3B,sBAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,EAAC;iBAC3C;gBACD,uBAAuB;gBACvB,sBAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,kBAAS,CAAC,KAAK,CAAC,CAAC,EAAC;;;KACnD;IAED;;OAEG;IACI,qCAAe,GAAtB,UAAuB,CAAa;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACI,gCAAU,GAAjB,UAAkB,CAAQ;QACxB,OAAO;IACT,CAAC;IAED;;OAEG;IACI,kCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACH,kBAAC;AAAD,CAAC,AAvED,IAuEC;AAvEqB,kCAAW","sourcesContent":["import { Scope } from '@sentry/hub';\nimport { Breadcrumb, SentryEvent, SentryEventHint, SentryResponse, Severity, Transport } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { serialize } from '@sentry/utils/object';\nimport { SentryError } from './error';\nimport { Backend, Options } from './interfaces';\nimport { NoopTransport } from './transports/noop';\n\n/** A class object that can instanciate Backend objects. */\nexport interface BackendClass<B extends Backend, O extends Options> {\n  new (options: O): B;\n}\n\n/**\n * This is the base implemention of a Backend.\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly options: O;\n\n  /** Cached transport used internally. */\n  protected transport: Transport;\n\n  /** Creates a new browser backend instance. */\n  public constructor(options: O) {\n    this.options = options;\n    if (!this.options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this.transport = this.setupTransport();\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected setupTransport(): Transport {\n    return new NoopTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(_exception: any, _hint?: SentryEventHint): Promise<SentryEvent> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(_message: string, _level?: Severity, _hint?: SentryEventHint): Promise<SentryEvent> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(event: SentryEvent): Promise<SentryResponse> {\n    // TODO: Remove with v5\n    // tslint:disable-next-line\n    if (this.transport.captureEvent) {\n      // tslint:disable-next-line\n      return this.transport.captureEvent(event);\n    }\n    // --------------------\n    return this.transport.sendEvent(serialize(event));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeBreadcrumb(_: Breadcrumb): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeScope(_: Scope): void {\n    // Noop\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this.transport;\n  }\n}\n"]}